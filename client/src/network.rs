use std::{net::AddrParseError, sync::Arc};

use futures::SinkExt;
use quinn::{ClientConfig, ConnectError, ConnectionError, Endpoint, NewConnection};
use thiserror::Error;

use tokio::{spawn, sync::mpsc};
use tokio_stream::StreamExt;
use tracing::info;
use wgpu_block_shared::protocol::{self, ClientMessage, ServerMessage};

pub async fn run(
    (in_tx, mut out_rx): (
        crossbeam_channel::Sender<ServerMessage>,
        mpsc::UnboundedReceiver<ClientMessage>,
    ),
) -> Result<(), Error> {
    let mut endpoint = Endpoint::client("0.0.0.0:0".parse()?)?;
    let client_config = make_client_config();
    endpoint.set_default_client_config(client_config);

    let NewConnection {
        connection: conn, ..
    } = endpoint
        .connect("127.0.0.1:5000".parse()?, "localhost")?
        .await?;
    let (tx, rx) = conn.open_bi().await?;
    let (mut tx, mut rx) = protocol::make_framed(tx, rx);

    // task that sends the messages generated by the main loop to the server
    let sender_task = spawn(async move {
        // send the login message
        info!("Sending login message");
        tx.send(ClientMessage::Login.serialize()?.into()).await?;

        // the client messages are deliberately sent sequentially,
        // since otherwise they may end up being sent unordered
        while let Some(client_msg) = out_rx.recv().await {
            let client_msg = client_msg.serialize()?;
            tx.send(client_msg.into()).await?;
        }

        Result::<(), Error>::Ok(())
    });

    while let Some(server_msg) = rx.next().await {
        let server_msg = server_msg?;
        let server_msg = ServerMessage::deserialize(server_msg)?;
        info!("Got message from server: {server_msg:?}");
        in_tx.send(server_msg)?;
    }

    sender_task.await??;

    Ok(())
}

fn make_client_config() -> ClientConfig {
    let crypto = rustls::ClientConfig::builder()
        .with_safe_defaults()
        .with_custom_certificate_verifier(SkipServerVerification::new())
        .with_no_client_auth();

    ClientConfig::new(Arc::new(crypto))
}

struct SkipServerVerification;

impl SkipServerVerification {
    fn new() -> Arc<Self> {
        Arc::new(Self)
    }
}

impl rustls::client::ServerCertVerifier for SkipServerVerification {
    fn verify_server_cert(
        &self,
        _end_entity: &rustls::Certificate,
        _intermediates: &[rustls::Certificate],
        _server_name: &rustls::ServerName,
        _scts: &mut dyn Iterator<Item = &[u8]>,
        _ocsp_response: &[u8],
        _now: std::time::SystemTime,
    ) -> Result<rustls::client::ServerCertVerified, rustls::Error> {
        Ok(rustls::client::ServerCertVerified::assertion())
    }
}

#[derive(Debug, Error)]
pub enum Error {
    #[error(transparent)]
    IO(#[from] std::io::Error),

    #[error(transparent)]
    AddrParse(#[from] AddrParseError),

    #[error(transparent)]
    NewConnectionFail(#[from] ConnectError),

    #[error(transparent)]
    ConnectionLost(#[from] ConnectionError),

    #[error(transparent)]
    Shared(#[from] wgpu_block_shared::Error),

    #[error(transparent)]
    InternalSend(#[from] crossbeam_channel::SendError<ServerMessage>),

    #[error(transparent)]
    Join(#[from] tokio::task::JoinError),
}
